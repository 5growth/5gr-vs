openapi: 3.0.1
info:
  title: Api Documentation
  description: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
servers:
- url: //localhost:8082/
tags:
- name: Arbitrator Policy Catalogue API
  description: Arbitrator Policy Catalogue Rest Controller
- name: Arbitrator notification API
  description: Exernal Arbitrator Rest Controller
- name: Domain management API
  description: Domain Catalogue Rest Controller
- name: NSD and VNFD query API
  description: Nfvo Catalogue Rest Controller
- name: Network Slice LCM API
  description: Nsmf Rest Controller
- name: Network Slice Template Management API
  description: Ns Template Catalogue Rest Controller
- name: Translation Rule Catalogue API
  description: Translation Rule Catalogue Rest Controller
- name: User, group and SLA management API
  description: Admin Rest Controller
- name: Vertical Service Blueprint Catalogue API
  description: Vs Blueprint Catalogue Rest Controller
- name: Vertical Service Descriptor Catalogue API
  description: Vs Descriptor Catalogue Rest Controller
- name: Vertical Service LCM Management API
  description: Vs Lcm Basic Rest Controller
- name: domain-layer-catalogue-notification-rest-controller
  description: Domain Layer Catalogue Notification Rest Controller
- name: nsmf-notifications-rest-controller
  description: Nsmf Notifications Rest Controller
- name: security-rest-controller
  description: Security Rest Controller
paths:
  /arbitrator/notifyArbitrationResponse/{operationId}:
    post:
      tags:
      - Arbitrator notification API
      summary: notifyArbirationResponse
      operationId: notifyArbirationResponseUsingPOST
      parameters:
      - name: operationId
        in: path
        description: operationId
        required: true
        schema:
          type: string
      requestBody:
        description: response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArbitratorResponse'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: response
  /domainLayer/catalogue:
    get:
      tags:
      - Domain management API
      summary: getAllDomain
      operationId: getAllDomainUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Domain management API
      summary: createDomain
      operationId: createDomainUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: domain
  /domainLayer/catalogue/subscriptions:
    get:
      tags:
      - Domain management API
      summary: subscriptionsGet
      operationId: subscriptionsGetUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Domain management API
      summary: subscriptionsPost
      operationId: subscriptionsPostUsingPOST
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainCatalogueSubscriptionRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: body
  /domainLayer/catalogue/subscriptions/{subscriptionId}:
    get:
      tags:
      - Domain management API
      summary: subscriptionGet
      operationId: subscriptionGetUsingGET
      parameters:
      - name: subscriptionId
        in: path
        description: subscriptionId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Domain management API
      summary: subscriptionDelete
      operationId: subscriptionDeleteUsingDELETE
      parameters:
      - name: subscriptionId
        in: path
        description: subscriptionId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /domainLayer/catalogue/{domainId}:
    get:
      tags:
      - Domain management API
      summary: getDomain
      operationId: getDomainUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: domainId
        in: path
        description: domainId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Domain management API
      summary: deleteDomain
      operationId: deleteDomainUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: domainId
        in: path
        description: domainId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /domainLayerCatalogue/notifications:
    post:
      tags:
      - domain-layer-catalogue-notification-rest-controller
      summary: notifyFromDomainLayerCatalogue
      operationId: notifyFromDomainLayerCatalogueUsingPOST
      requestBody:
        description: notification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainCatalogueSubscriptionNotification'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: notification
  /nfvo/queryNsd:
    post:
      tags:
      - NSD and VNFD query API
      summary: Get the available NSDs
      operationId: queryNsdUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralizedQueryRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueryNsdResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /nfvo/queryVnfp:
    post:
      tags:
      - NSD and VNFD query API
      summary: Get the available VNFDs
      operationId: queryVnfPackageUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralizedQueryRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueryOnBoardedVnfPkgInfoResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /ns/catalogue/nstemplate:
    get:
      tags:
      - Network Slice Template Management API
      summary: getAllNsTemplates
      operationId: getAllNsTemplatesUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Network Slice Template Management API
      summary: createNsTemplate
      operationId: createNsTemplateUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnBoardNsTemplateRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /ns/catalogue/nstemplate/{nstId}:
    get:
      tags:
      - Network Slice Template Management API
      summary: getNsTemplate
      operationId: getNsTemplateUsingGET
      parameters:
      - name: nstId
        in: path
        description: nstId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Network Slice Template Management API
      summary: deleteNsTemplate
      operationId: deleteNsTemplateUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: nstId
        in: path
        description: nstId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /portal/catalogue/arbitrator:
    get:
      tags:
      - Arbitrator Policy Catalogue API
      summary: Get all arbitration policies
      operationId: getAllArbitrationPoliciesUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: List of all the arbitration policies
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArbitratorPolicyInfo'
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    put:
      tags:
      - Arbitrator Policy Catalogue API
      summary: Update a set of Arbitration policies.
      operationId: updateArbitrationPolicyUsingPUT
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardArbitratorPolicyRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        204:
          description: Policies updated.
          content:
            '*/*':
              schema:
                type: object
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      x-codegen-request-body-name: request
    post:
      tags:
      - Arbitrator Policy Catalogue API
      summary: Onboard a set of Arbitration Policies.
      operationId: createArbitrationPoliciesUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardArbitratorPolicyRequest'
        required: true
      responses:
        201:
          description: The list of IDs of the created arbitration policies.
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        409:
          description: The list of arbitration polices already exists.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      x-codegen-request-body-name: request
  /portal/catalogue/arbitrator/{policyId}:
    delete:
      tags:
      - Arbitrator Policy Catalogue API
      summary: Delete a arbitration policy with a specific id.
      operationId: deleteArbitrationPolicyeUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: policyId
        in: path
        description: policyId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: Rule deleted.
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /portal/catalogue/translationrule:
    get:
      tags:
      - Translation Rule Catalogue API
      summary: Get all translation rules.
      operationId: getAllTranslationRulesUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: List of all the translation rules
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VsdNsdTranslationRule'
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    put:
      tags:
      - Translation Rule Catalogue API
      summary: Update a set of Translation Rules.
      operationId: updateTranslationRuleUsingPUT_1
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnBoardTranslationRuleRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        204:
          description: Rules updated.
          content:
            '*/*':
              schema:
                type: object
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      x-codegen-request-body-name: request
    post:
      tags:
      - Translation Rule Catalogue API
      summary: Onboard a set of translation rules.
      operationId: createTranslationRulesUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnBoardTranslationRuleRequest'
        required: true
      responses:
        201:
          description: The list of IDs of the created translation rules.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VsdNsdTranslationRule'
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        409:
          description: The list of translation rules already exists.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      x-codegen-request-body-name: request
  /portal/catalogue/translationrule/{blueprintId}:
    get:
      tags:
      - Translation Rule Catalogue API
      summary: Get all translation rules of specific Blueprint.
      operationId: getAllTranslationRulesWithIdUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: blueprintId
        in: path
        description: blueprintId
        required: true
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: List of all the translation rules of a specific Blueprint
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VsdNsdTranslationRule'
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /portal/catalogue/translationrule/{ruleId}:
    put:
      tags:
      - Translation Rule Catalogue API
      summary: Update a translation rule with specific id.
      operationId: updateTranslationRuleUsingPUT
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: ruleId
        in: path
        description: ruleId
        required: true
        schema:
          type: string
      requestBody:
        description: rule
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VsdNsdTranslationRule'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: The id of the updated rule.
          content:
            '*/*':
              schema:
                type: string
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      x-codegen-request-body-name: rule
    delete:
      tags:
      - Translation Rule Catalogue API
      summary: Delete a translation rule with a specific id.
      operationId: deleteTranslationRuleUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: ruleId
        in: path
        description: ruleId
        required: true
        schema:
          type: string
      responses:
        200:
          description: Rule deleted.
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /portal/catalogue/vsblueprint:
    get:
      tags:
      - Vertical Service Blueprint Catalogue API
      summary: Get ALL the Vertical Service Blueprints
      operationId: getAllVsBlueprintsUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: id
        in: query
        description: id
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      - name: site
        in: query
        description: site
        schema:
          type: string
      responses:
        200:
          description: List of all the Vertical Service Blueprints of the user
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VsBlueprintInfo'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Vertical Service Blueprint Catalogue API
      summary: Onboard a new Vertical Service Blueprint, including the associated
        Network Service Descriptors and translation rules.
      operationId: createVsBlueprintUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnBoardVsBlueprintRequest'
        required: true
      responses:
        201:
          description: The ID of the created Vertical Service Blueprint.
          content:
            '*/*':
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /portal/catalogue/vsblueprint/{vsbId}:
    get:
      tags:
      - Vertical Service Blueprint Catalogue API
      summary: Get a Vertical Service Blueprint with a given ID
      operationId: getVsBlueprintUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsbId
        in: path
        description: vsbId
        required: true
        schema:
          type: string
      responses:
        200:
          description: Vertical Service Blueprint with the given ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VsBlueprintInfo'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Vertical Service Blueprint Catalogue API
      summary: Delete a Vertical Service Blueprint with a given ID
      operationId: deleteVsBlueprintUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsbId
        in: path
        description: vsbId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: Empty
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseEntity'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /portal/catalogue/vsdescriptor:
    get:
      tags:
      - Vertical Service Descriptor Catalogue API
      summary: Query ALL the Vertical Service Descriptor
      operationId: getAllVsDescriptorsUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: List of all the Vertical Service Descriptor of the user.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VsDescriptor'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Vertical Service Descriptor Catalogue API
      summary: Onboard a new Vertical Service Descriptor
      operationId: createVsDescriptorUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardVsDescriptorRequest'
        required: true
      responses:
        201:
          description: The ID of the created Vertical Service Descriptor.
          content:
            '*/*':
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /portal/catalogue/vsdescriptor/{vsdId}:
    get:
      tags:
      - Vertical Service Descriptor Catalogue API
      summary: Query a Vertical Service Descriptor with a given ID
      operationId: getVsDescriptorUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsdId
        in: path
        description: vsdId
        required: true
        schema:
          type: string
      responses:
        200:
          description: Details of the Vertical Service Descriptor with the given ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VsDescriptor'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Vertical Service Descriptor Catalogue API
      summary: Delete a Vertical Service Descriptor with the given ID
      operationId: deleteVsDescriptorUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsdId
        in: path
        description: vsdId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: Empty
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseEntity'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/admin/group:
    get:
      tags:
      - User, group and SLA management API
      summary: getTenantGroups
      operationId: getTenantGroupsUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/admin/group/{groupName}/tenant:
    post:
      tags:
      - User, group and SLA management API
      summary: createTenant
      operationId: createTenantUsingPOST_1
      parameters:
      - name: groupName
        in: path
        description: groupName
        required: true
        schema:
          type: string
      requestBody:
        description: tenant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: tenant
  /vs/admin/group/{groupName}/tenant/{tenantId}:
    put:
      tags:
      - User, group and SLA management API
      summary: updateTenant
      operationId: updateTenantUsingPUT
      parameters:
      - name: groupName
        in: path
        description: groupName
        required: true
        schema:
          type: string
      - name: tenantId
        in: path
        description: tenantId
        required: true
        schema:
          type: string
      requestBody:
        description: remoteTenantInfoId
        content:
          application/json:
            schema:
              type: integer
              format: int64
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: remoteTenantInfoId
  /vs/admin/group/{groupName}/tenant/{tenantId}/remotetenant:
    delete:
      tags:
      - User, group and SLA management API
      summary: deleteRemoteTenantEntry
      operationId: deleteRemoteTenantEntryUsingDELETE
      parameters:
      - name: groupName
        in: path
        description: groupName
        required: true
        schema:
          type: string
      - name: tenantId
        in: path
        description: tenantId
        required: true
        schema:
          type: string
      requestBody:
        description: remoteTenantInfoId
        content:
          '*/*':
            schema:
              type: integer
              format: int64
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      x-codegen-request-body-name: remoteTenantInfoId
  /vs/admin/group/{groupName}/tenant/{userName}/sla:
    post:
      tags:
      - User, group and SLA management API
      summary: createTenant
      operationId: createTenantUsingPOST
      parameters:
      - name: userName
        in: path
        description: userName
        required: true
        schema:
          type: string
      requestBody:
        description: sla
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sla'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: sla
  /vs/admin/group/{groupname}/tenant:
    get:
      tags:
      - User, group and SLA management API
      summary: getTenantsInGroup
      operationId: getTenantsInGroupUsingGET
      parameters:
      - name: groupname
        in: path
        description: groupname
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/admin/group/{groupname}/tenant/{username}:
    get:
      tags:
      - User, group and SLA management API
      summary: Get Tenant
      operationId: getTenantUsingGET
      parameters:
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: Tenant
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Tenant'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - User, group and SLA management API
      summary: deleteTenant
      operationId: deleteTenantUsingDELETE
      parameters:
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/admin/group/{groupname}/tenant/{username}/sla:
    get:
      tags:
      - User, group and SLA management API
      summary: Get user SLAs
      operationId: getTenantSlasUsingGET
      parameters:
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of user SLAs
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sla'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/admin/group/{groupname}/tenant/{username}/sla/{slaId}:
    get:
      tags:
      - User, group and SLA management API
      summary: getSla
      operationId: getSlaUsingGET
      parameters:
      - name: slaId
        in: path
        description: slaId
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - User, group and SLA management API
      summary: deleteSla
      operationId: deleteSlaUsingDELETE
      parameters:
      - name: slaId
        in: path
        description: slaId
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/admin/group/{name}:
    get:
      tags:
      - User, group and SLA management API
      summary: getGroup
      operationId: getGroupUsingGET
      parameters:
      - name: name
        in: path
        description: name
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - User, group and SLA management API
      summary: createGroup
      operationId: createGroupUsingPOST
      parameters:
      - name: name
        in: path
        description: name
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - User, group and SLA management API
      summary: deleteGroup
      operationId: deleteGroupUsingDELETE
      parameters:
      - name: name
        in: path
        description: name
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/admin/groups/tenants:
    get:
      tags:
      - User, group and SLA management API
      summary: getTenants
      operationId: getTenantsUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    put:
      tags:
      - User, group and SLA management API
      summary: updateTenants
      operationId: updateTenantsUsingPUT
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/admin/policy:
    get:
      tags:
      - User, group and SLA management API
      summary: getPolicies
      operationId: getPoliciesUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - User, group and SLA management API
      summary: createPolicy
      operationId: createPolicyUsingPOST
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferPolicyRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/admin/policy/{policyid}:
    get:
      tags:
      - User, group and SLA management API
      summary: getPolicy
      operationId: getPolicyUsingGET
      parameters:
      - name: policyid
        in: path
        description: policyid
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - User, group and SLA management API
      summary: deletePolicy
      operationId: deletePolicyUsingDELETE
      parameters:
      - name: policyid
        in: path
        description: policyid
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/admin/remotetenant:
    get:
      tags:
      - User, group and SLA management API
      summary: getRemoteTenantInfo
      operationId: getRemoteTenantInfoUsingGET_1
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - User, group and SLA management API
      summary: createRemoteTenantInfo
      operationId: createRemoteTenantInfoUsingPOST
      requestBody:
        description: remoteTenantInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteTenantInfo'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: remoteTenantInfo
  /vs/admin/remotetenant/{remoteTenantInfoId}:
    delete:
      tags:
      - User, group and SLA management API
      summary: deleteRemoteTenantInfo
      operationId: deleteRemoteTenantInfoUsingDELETE
      parameters:
      - name: remoteTenantInfoId
        in: path
        description: remoteTenantInfoId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/admin/remotetenant/{remotetenantinfoid}:
    get:
      tags:
      - User, group and SLA management API
      summary: getRemoteTenantInfo
      operationId: getRemoteTenantInfoUsingGET
      parameters:
      - name: remotetenantinfoid
        in: path
        description: remotetenantinfoid
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/basic/nslcm/networksliceids:
    get:
      tags:
      - Network Slice LCM API
      summary: Get all the Network Slice Instance IDSs
      operationId: getNsInstanceIdsUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: The list of Network Slice Instances IDS.
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/basic/nslcm/ns:
    get:
      tags:
      - Network Slice LCM API
      summary: Get all the Network Slice Instances
      operationId: getNsInstanceUsingGET_1
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: The list of Network Slice Instances.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSliceInstance'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Network Slice LCM API
      summary: createNsId
      operationId: createNsIdUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNsiIdRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/basic/nslcm/ns/{nsiId}:
    get:
      tags:
      - Network Slice LCM API
      summary: 'Get the Network Slice Instance with the specified ID '
      operationId: getNsInstanceUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: nsiId
        in: path
        description: nsiId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: The Network Slice Instance.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NetworkSliceInstance'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/basic/nslcm/ns/{nsiId}/action/instantiate:
    put:
      tags:
      - Network Slice LCM API
      summary: instantiateNsi
      operationId: instantiateNsiUsingPUT
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: nsiId
        in: path
        description: nsiId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantiateNsiRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/basic/nslcm/ns/{nsiId}/action/modify:
    put:
      tags:
      - Network Slice LCM API
      summary: modifyNsi
      operationId: modifyNsiUsingPUT
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: nsiId
        in: path
        description: nsiId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyNsiRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/basic/nslcm/ns/{nsiId}/action/terminate:
    put:
      tags:
      - Network Slice LCM API
      summary: terminateNsi
      operationId: terminateNsiUsingPUT
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: nsiId
        in: path
        description: nsiId
        required: true
        schema:
          type: string
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminateNsiRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/basic/vslcm/nsi:
    get:
      tags:
      - Vertical Service LCM Management API
      summary: Get all NSI
      operationId: getAllNsiUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: The list of NSI
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSliceInstance'
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: User not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: NSIs not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /vs/basic/vslcm/nsi/{vsiId}:
    get:
      tags:
      - Vertical Service LCM Management API
      summary: Get NSI associated to a specific VSI
      operationId: getAssociatedNsiForVsiUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsiId
        in: path
        description: vsiId
        required: true
        schema:
          type: string
      responses:
        200:
          description: NSI associated to a specific VSI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NetworkSliceInstance'
        400:
          description: The request contains elements impossible to process
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: User not allowed to perform the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content: {}
        404:
          description: VSI or NSI not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /vs/basic/vslcm/vs:
    post:
      tags:
      - Vertical Service LCM Management API
      summary: instantiateVs
      operationId: instantiateVsUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantiateVsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/basic/vslcm/vs/{vsiId}:
    get:
      tags:
      - Vertical Service LCM Management API
      summary: Get the Vertical Service Instance with the specified ID
      operationId: getVsInstanceUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsiId
        in: path
        description: vsiId
        required: true
        schema:
          type: string
      responses:
        200:
          description: The Vertical Service Instance
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VerticalServiceInstance'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    put:
      tags:
      - Vertical Service LCM Management API
      summary: modifyVsInstance
      operationId: modifyVsInstanceUsingPUT
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsiId
        in: path
        description: vsiId
        required: true
        schema:
          type: string
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyVsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
    delete:
      tags:
      - Vertical Service LCM Management API
      summary: purgeVsInstance
      operationId: purgeVsInstanceUsingDELETE
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsiId
        in: path
        description: vsiId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /vs/basic/vslcm/vs/{vsiId}/terminate:
    post:
      tags:
      - Vertical Service LCM Management API
      summary: terminateVsInstance
      operationId: terminateVsInstanceUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      - name: vsiId
        in: path
        description: vsiId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/basic/vslcm/vsId:
    get:
      tags:
      - Vertical Service LCM Management API
      summary: Get the list of Vertical Service Instance IDs
      operationId: getAllVsInstancesIdUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: The Vertical Service Instance
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /vs/basic/vslcm/vsInstances:
    post:
      tags:
      - Vertical Service LCM Management API
      summary: Get the list of Vertical Service Instance matching the specified filter
      operationId: getAllVsInstancesUsingPOST
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralizedQueryRequest'
        required: true
      responses:
        200:
          description: The Vertical Service Instances matching the filter params
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerticalServiceInstance'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
  /vs/notifications/nsifailure:
    post:
      tags:
      - nsmf-notifications-rest-controller
      summary: notifyNsiFailure
      operationId: notifyNsiFailureUsingPOST
      requestBody:
        description: notification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkSliceFailureNotification'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: notification
  /vs/notifications/nsilcmchange:
    post:
      tags:
      - nsmf-notifications-rest-controller
      summary: notifyNsiLcmChange
      operationId: notifyNsiLcmChangeUsingPOST
      requestBody:
        description: notification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkSliceStatusChangeNotification'
        required: true
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: notification
  /vs/whoami:
    get:
      tags:
      - security-rest-controller
      summary: whoami
      operationId: whoamiUsingGET
      parameters:
      - name: authenticated
        in: query
        schema:
          type: boolean
      - name: authorities[0].authority
        in: query
        schema:
          type: string
      - name: credentials
        in: query
        schema:
          type: object
      - name: details
        in: query
        schema:
          type: object
      - name: principal
        in: query
        schema:
          type: object
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
components:
  schemas:
    AddressData:
      title: AddressData
      type: object
      properties:
        addressType:
          type: string
          enum:
          - MAC_ADDRESS
          - IP_ADDRESS
        floatingIpActivated:
          type: boolean
        iPAddressAssignment:
          type: boolean
        iPAddressType:
          type: string
          enum:
          - IPv4
          - IPv6
        management:
          type: boolean
        numberOfIpAddress:
          type: integer
          format: int32
    AffinityOrAntiAffinityGroup:
      title: AffinityOrAntiAffinityGroup
      type: object
      properties:
        affinityOrAntiAffinity:
          type: string
          enum:
          - AFFINITY
          - ANTI_AFFINITY
        groupId:
          type: string
        scope:
          type: string
          enum:
          - NFVI_NODE
          - NFVI_POP
          - ZONE
          - ZONE_GROUP
    AffinityRule:
      title: AffinityRule
      type: object
      properties:
        affinityOrAntiAffinity:
          type: string
          enum:
          - AFFINITY
          - ANTI_AFFINITY
        scope:
          type: string
          enum:
          - NFVI_NODE
          - NFVI_POP
          - ZONE
          - ZONE_GROUP
    ApplicationMetric:
      title: ApplicationMetric
      type: object
      properties:
        interval:
          type: string
        metricCollectionType:
          type: string
          enum:
          - CUMULATIVE
          - DELTA
          - GAUGE
        metricId:
          type: string
        name:
          type: string
        topic:
          type: string
        unit:
          type: string
    ArbitratorPolicy:
      title: ArbitratorPolicy
      type: object
      properties:
        arbitratorPolicyId:
          type: string
        default:
          type: boolean
        filter:
          $ref: '#/components/schemas/ArbitratorPolicyFilter'
        modelId:
          type: string
        name:
          type: string
        policyUpdateStrategy:
          type: string
          enum:
          - ALWAYS
          - EVERY_N_EXECUTIONS
          - PERIODICALLY
        policyUpdateStrategyParams:
          type: object
          additionalProperties:
            type: string
    ArbitratorPolicyFilter:
      title: ArbitratorPolicyFilter
      type: object
      properties:
        filterData:
          type: object
          additionalProperties:
            type: string
    ArbitratorPolicyInfo:
      title: ArbitratorPolicyInfo
      type: object
      properties:
        arbitratorPolicy:
          $ref: '#/components/schemas/ArbitratorPolicy'
        arbitratorPolicyInfoId:
          type: string
        lastUpdate:
          type: string
          format: date-time
        timesUsed:
          type: integer
          format: int32
        trainedModelFilePath:
          type: string
    ArbitratorResponse:
      title: ArbitratorResponse
      type: object
      properties:
        acceptableRequest:
          type: boolean
        existingCompositeSlice:
          type: string
        existingCompositeSliceToUpdate:
          type: boolean
        existingSliceSubnets:
          type: object
          additionalProperties:
            type: boolean
        impactedNetworkSliceInstances:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NetworkSliceInstanceAction'
        impactedVerticalServiceInstances:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VsAction'
        newSliceRequired:
          type: boolean
        requestId:
          type: string
    AutoscalingAction:
      title: AutoscalingAction
      type: object
      properties:
        scaleNsToLevelData:
          $ref: '#/components/schemas/ScaleNsToLevelData'
        scaleType:
          type: string
          enum:
          - SCALE_NS
          - SCALE_VNF
    AutoscalingRuleCondition:
      title: AutoscalingRuleCondition
      type: object
      properties:
        cooldownTime:
          type: integer
          format: int32
        enabled:
          type: boolean
        initialInstantiationLevel:
          type: string
        name:
          type: string
        scaleInOperationType:
          type: string
          enum:
          - AND
          - OR
        scaleOutOperationType:
          type: string
          enum:
          - AND
          - OR
        scalingCriteria:
          type: array
          items:
            $ref: '#/components/schemas/AutoscalingRuleCriteria'
        scalingType:
          type: string
          enum:
          - MANUAL_SCALING
          - AUTOMATED_SCALING
        thresholdTime:
          type: integer
          format: int32
    AutoscalingRuleCriteria:
      title: AutoscalingRuleCriteria
      type: object
      properties:
        name:
          type: string
        nsMonitoringParamRef:
          type: string
        scaleInRelationalOperation:
          type: string
          enum:
          - GE
          - LE
          - GT
          - LT
          - EQ
        scaleInThreshold:
          type: integer
          format: int32
        scaleOutRelationalOperation:
          type: string
          enum:
          - GE
          - LE
          - GT
          - LT
          - EQ
        scaleOutThreshold:
          type: integer
          format: int32
    ChangeExtVnfConnectivityOpConfig:
      title: ChangeExtVnfConnectivityOpConfig
      type: object
      properties:
        parameter:
          type: array
          items:
            type: string
    ChangeVnfFlavourOpConfig:
      title: ChangeVnfFlavourOpConfig
      type: object
      properties:
        parameter:
          type: array
          items:
            type: string
    ConnectivityType:
      title: ConnectivityType
      type: object
      properties:
        flowPattern:
          type: string
        layerProtocol:
          type: string
          enum:
          - ETHERNET
          - MPLS
          - ODU2
          - IPV4
          - IPV6
          - PSEUDO_WIRE
          - OTSIA
          - OCH
          - OTU
          - ODU
          - SDM
          - AROF
          - NOT_SPECIFIED
    CreateNsiIdRequest:
      title: CreateNsiIdRequest
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        nstId:
          type: string
    Dependencies:
      title: Dependencies
      type: object
      properties:
        primaryId:
          type: array
          items:
            type: string
        secondaryId:
          type: array
          items:
            type: string
    Domain:
      title: Domain
      type: object
      properties:
        admin:
          type: string
        description:
          type: string
        domainId:
          type: string
        domainInterface:
          $ref: '#/components/schemas/DomainInterface'
        domainStatus:
          type: string
          enum:
          - ACTIVE
          - MAINTENANCE
          - DISABLED
        domainsAgreement:
          type: array
          items:
            $ref: '#/components/schemas/DomainAgreement'
        name:
          type: string
        ownedLayers:
          type: array
          items:
            $ref: '#/components/schemas/DomainLayer'
        owner:
          type: string
    DomainAgreement:
      title: DomainAgreement
      type: object
      properties:
        domainAgreeWithId:
          type: string
        domainLayersListAgreeWith:
          type: array
          items:
            type: string
    DomainCatalogueSubscriptionNotification:
      title: DomainCatalogueSubscriptionNotification
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        notificationType:
          type: string
          enum:
          - DOMAIN_ONBOARDING
          - DOMAIN_REMOVAL
    DomainCatalogueSubscriptionRequest:
      title: DomainCatalogueSubscriptionRequest
      type: object
      properties:
        callbackURI:
          type: string
        subscriptionType:
          type: string
          enum:
          - DOMAIN_SUBSCRIPTION
    DomainInterface:
      title: DomainInterface
      type: object
      properties:
        auth:
          type: boolean
        interfaceType:
          type: string
          enum:
          - HTTP
          - RABBIT
          - LOCAL
        port:
          type: integer
          format: int32
        url:
          type: string
    DomainLayer:
      title: DomainLayer
      type: object
      properties:
        domainLayerId:
          type: string
        domainLayerType:
          type: string
          enum:
          - VERTICAL_SERVICE_PROVIDER
          - NETWORK_SLICE_PROVIDER
          - NETWORK_SERVICE_PROVIDER
      discriminator:
        propertyName: type
    EMBBPerfReq:
      title: EMBBPerfReq
      type: object
      properties:
        activityFactor:
          type: integer
          format: int32
        areaTrafficCapDL:
          type: integer
          format: int32
        areaTrafficCapUL:
          type: integer
          format: int32
        coverage:
          type: string
        expDataRateDL:
          type: integer
          format: int32
        expDataRateUL:
          type: integer
          format: int32
        uESpeed:
          type: integer
          format: int32
        userDensity:
          type: integer
          format: int32
    EMBBServiceParameters:
      title: EMBBServiceParameters
      allOf:
      - $ref: '#/components/schemas/SliceServiceParameters'
      - title: EMBBServiceParameters
        type: object
        properties:
          areaTrafficCapDL:
            type: integer
            format: int64
          areaTrafficCapUL:
            type: integer
            format: int64
          coverage:
            type: string
          expDataRateDL:
            type: integer
            format: int64
          expDataRateUL:
            type: integer
            format: int64
          uESpeed:
            type: integer
            format: int64
          userDensity:
            type: integer
            format: int64
    Error:
      title: Error
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
        message:
          type: string
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
    Filter:
      title: Filter
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: string
    GeneralizedQueryRequest:
      title: GeneralizedQueryRequest
      type: object
      properties:
        attributeSelector:
          type: array
          items:
            type: string
        filter:
          $ref: '#/components/schemas/Filter'
    GeographicalAreaInfo:
      title: GeographicalAreaInfo
      type: object
      properties:
        description:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        used:
          type: boolean
    HealVnfOpConfig:
      title: HealVnfOpConfig
      type: object
      properties:
        cause:
          type: array
          items:
            type: string
        parameter:
          type: array
          items:
            type: string
    InstantiateNsiRequest:
      title: InstantiateNsiRequest
      type: object
      properties:
        dfId:
          type: string
        ilId:
          type: string
        locationConstraints:
          $ref: '#/components/schemas/LocationInfo'
        nsSubnetIds:
          type: array
          items:
            type: string
        nsiId:
          type: string
        nstId:
          type: string
        ranEndPointId:
          type: string
        sliceServiceParameters:
          type: object
          properties: {}
        userData:
          type: object
          additionalProperties:
            type: string
    InstantiateVnfOpConfig:
      title: InstantiateVnfOpConfig
      type: object
      properties:
        parameter:
          type: array
          items:
            type: string
    InstantiateVsRequest:
      title: InstantiateVsRequest
      type: object
      properties:
        description:
          type: string
        locationConstraints:
          $ref: '#/components/schemas/LocationInfo'
        name:
          type: string
        notificationUrl:
          type: string
        tenantId:
          type: string
        userData:
          type: object
          additionalProperties:
            type: string
        vsdId:
          type: string
    InstantiationLevel:
      title: InstantiationLevel
      type: object
      properties:
        description:
          type: string
        levelId:
          type: string
        scaleInfo:
          type: array
          items:
            $ref: '#/components/schemas/ScaleInfo'
        vduLevel:
          type: array
          items:
            $ref: '#/components/schemas/VduLevel'
    LifeCycleManagementScript:
      title: LifeCycleManagementScript
      type: object
      properties:
        event:
          type: array
          items:
            type: string
            enum:
            - START_VNF_INSTANTIATION
            - END_VNF_INSTANTIATION
            - START_VNF_SCALING
            - END_VNF_SCALING
            - START_VNF_HEALING
            - END_VNF_HEALING
            - START_VNF_TERMINATION
            - END_VNF_TERMINATION
            - START_VNF_FLAVOUR_CHANGE
            - END_VNF_FLAVOUR_CHANGE
            - START_VNF_OP_STATE_CHANGE
            - END_VNF_OP_STATE_CHANGE
            - START_CHANGE_VNF_EXTERNAL_CONNECTIVITY
            - END_CHANGE_VNF_EXTERNAL_CONNECTIVITY
            - RECEIVED_MSG_VNF_INSTANTIATE
            - RECEIVED_MSG_VNF_SCALE
            - RECEIVED_MSG_VNF_HEAL
            - RECEIVED_MSG_VNF_TERMINATE
            - RECEIVED_MSG_CHANGE_VNF_FLAVOUR
            - RECEIVED_MSG_CHANGE_VNF_EXTERNAL_CONNECTIVITY
            - RECEIVED_MSG_CHANGE_VNF_OP_STATE
            - RECEIVED_MSG_VNF_CHANGE_INDICATION
            - START_NS_INSTANTIATION
            - END_NS_INSTANTIATION
            - START_NS_SCALING
            - END_NS_SCALING
            - START_NS_HEALING
            - END_NS_HEALING
            - START_NS_TERMINATION
            - END_NS_TERMINATION
            - START_NS_UPDATE
            - END_NS_UPDATE
            - RECEIVED_MSG_NS_INSTANTIATE
            - RECEIVED_MSG_NS_SCALE
            - RECEIVED_MSG_NS_HEAL
            - RECEIVED_MSG_NS_TERMINATE
            - RECEIVED_MSG_NS_UPDATE
        script:
          type: string
    LinkBitrateRequirements:
      title: LinkBitrateRequirements
      type: object
      properties:
        leaf:
          type: string
        root:
          type: string
    LocationInfo:
      title: LocationInfo
      type: object
      properties:
        altitude:
          type: number
          format: float
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        range:
          type: number
          format: float
    ModifyNsiRequest:
      title: ModifyNsiRequest
      type: object
      properties:
        dfId:
          type: string
        ilId:
          type: string
        nsiId:
          type: string
        nstId:
          type: string
        vsiId:
          type: string
    ModifyVsRequest:
      title: ModifyVsRequest
      type: object
      properties:
        tenantId:
          type: string
        vsdId:
          type: string
        vsiId:
          type: string
    MonitoredData:
      title: MonitoredData
      type: object
      properties:
        monitoringParameter:
          $ref: '#/components/schemas/MonitoringParameter'
        vnfIndicatorInfo:
          $ref: '#/components/schemas/VnfIndicatorData'
    MonitoringParameter:
      title: MonitoringParameter
      type: object
      properties:
        exporter:
          type: string
        monitoringParameterId:
          type: string
        name:
          type: string
        params:
          type: object
          additionalProperties:
            type: string
        performanceMetric:
          type: string
        type:
          type: string
    NST:
      title: NST
      type: object
      properties:
        geographicalAreaInfoList:
          type: array
          items:
            $ref: '#/components/schemas/GeographicalAreaInfo'
        nsdId:
          type: string
        nsdVersion:
          type: string
        nsst:
          type: array
          items:
            $ref: '#/components/schemas/NST'
        nsstIds:
          type: array
          items:
            type: string
        nsstType:
          type: string
          enum:
          - NONE
          - RAN
          - CORE
          - EHEALTH
        nstId:
          type: string
        nstName:
          type: string
        nstProvider:
          type: string
        nstServiceProfile:
          $ref: '#/components/schemas/NstServiceProfile'
        nstVersion:
          type: string
    NetworkSliceFailureNotification:
      title: NetworkSliceFailureNotification
      type: object
      properties:
        failureMessage:
          type: string
        nsiId:
          type: string
    NetworkSliceInstance:
      title: NetworkSliceInstance
      type: object
      properties:
        description:
          type: string
        dfId:
          type: string
        errorMessage:
          type: string
        instantiationLevelId:
          type: string
        name:
          type: string
        networkSliceSubnetInstances:
          type: array
          items:
            type: string
        nfvNsId:
          type: string
        nfvNsUrl:
          type: string
        nsdId:
          type: string
        nsdVersion:
          type: string
        nsiId:
          type: string
        nstId:
          type: string
        sapInfo:
          type: array
          items:
            $ref: '#/components/schemas/NsSapInfo'
        soManaged:
          type: boolean
        status:
          type: string
          enum:
          - NOT_INSTANTIATED
          - INSTANTIATING
          - INSTANTIATED
          - CONFIGURING
          - CONFIGURED
          - UNDER_MODIFICATION
          - MODIFIED
          - TERMINATING
          - TERMINATED
          - FAILED
          - UNKNOWN
        tenantId:
          type: string
        vnfPlacement:
          type: object
          additionalProperties:
            type: string
    NetworkSliceInstanceAction:
      title: NetworkSliceInstanceAction
      type: object
      properties:
        nsDf:
          type: string
        nsInstantiationLevel:
          type: string
        nsiActionType:
          type: string
          enum:
          - SCALE
        nsiId:
          type: string
    NetworkSliceStatusChangeNotification:
      title: NetworkSliceStatusChangeNotification
      type: object
      properties:
        nsiId:
          type: string
        statusChange:
          type: string
          enum:
          - NSI_CREATED
          - NSI_TERMINATED
          - NSI_CONFIGURED
          - NSI_MODIFIED
          - NSI_FAILED
          - NOT_SPECIFIED
        successful:
          type: boolean
        tenantId:
          type: string
    NetworkSliceSubnetInstance:
      title: NetworkSliceSubnetInstance
      type: object
      properties:
        domainId:
          type: string
        nsDeploymentFlavorId:
          type: string
        nsInstantiationLevelId:
          type: string
        nssiId:
          type: string
        nsstId:
          type: string
        status:
          type: string
          enum:
          - NOT_INSTANTIATED
          - INSTANTIATING
          - INSTANTIATED
          - CONFIGURING
          - CONFIGURED
          - UNDER_MODIFICATION
          - MODIFIED
          - TERMINATING
          - TERMINATED
          - FAILED
          - UNKNOWN
        vnfPlacement:
          type: object
          additionalProperties:
            type: string
    Nfpd:
      title: Nfpd
      type: object
      properties:
        cpd:
          type: array
          items:
            type: string
        nfpId:
          type: string
        nfpRule:
          $ref: '#/components/schemas/Rule'
        qos:
          $ref: '#/components/schemas/QoS'
    NfvNsInstantiationInfo:
      title: NfvNsInstantiationInfo
      type: object
      properties:
        deploymentFlavourId:
          type: string
        domainIds:
          type: array
          items:
            type: string
        instantiationLevelId:
          type: string
        nfvNsdId:
          type: string
        nsdVersion:
          type: string
        nsstDomain:
          type: object
          additionalProperties:
            type: string
        nstId:
          type: string
        sliceServiceParameters:
          $ref: '#/components/schemas/SliceServiceParameters'
    NfvoDomainLayer:
      title: NfvoDomainLayer
      allOf:
      - $ref: '#/components/schemas/DomainLayer'
      - title: NfvoDomainLayer
        type: object
        properties:
          domainLayerId:
            type: string
          domainLayerType:
            type: string
            enum:
            - VERTICAL_SERVICE_PROVIDER
            - NETWORK_SLICE_PROVIDER
            - NETWORK_SERVICE_PROVIDER
          manoNbiType:
            type: string
            enum:
            - RAN_CONTROL_DRIVER
            - QOS_CONTROL_DRIVER
            - NMRO_DRIVER
            - OSM_DRIVER
        discriminator:
          propertyName: type
    NsAutoscalingRule:
      title: NsAutoscalingRule
      type: object
      properties:
        ruleActions:
          type: array
          items:
            $ref: '#/components/schemas/AutoscalingAction'
        ruleCondition:
          $ref: '#/components/schemas/AutoscalingRuleCondition'
        ruleId:
          type: string
    NsDf:
      title: NsDf
      type: object
      properties:
        affinityOrAntiAffinityGroup:
          type: array
          items:
            $ref: '#/components/schemas/AffinityOrAntiAffinityGroup'
        defaultNsInstantiationLevelId:
          type: string
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Dependencies'
        flavourKey:
          type: string
        nsDfId:
          type: string
        nsInstantiationLevel:
          type: array
          items:
            $ref: '#/components/schemas/NsLevel'
        nsProfile:
          type: array
          items:
            $ref: '#/components/schemas/NsProfile'
        pnfProfile:
          type: array
          items:
            $ref: '#/components/schemas/PnfProfile'
        scalingAspect:
          type: array
          items:
            $ref: '#/components/schemas/NsScalingAspect'
        virtualLinkProfile:
          type: array
          items:
            $ref: '#/components/schemas/VirtualLinkProfile'
        vnfProfile:
          type: array
          items:
            $ref: '#/components/schemas/VnfProfile'
    NsLevel:
      title: NsLevel
      type: object
      properties:
        description:
          type: string
        nsLevelId:
          type: string
        nsToLevelMapping:
          type: array
          items:
            $ref: '#/components/schemas/NsToLevelMapping'
        virtualLinkToLevelMapping:
          type: array
          items:
            $ref: '#/components/schemas/VirtualLinkToLevelMapping'
        vnfToLevelMapping:
          type: array
          items:
            $ref: '#/components/schemas/VnfToLevelMapping'
    NsProfile:
      title: NsProfile
      type: object
      properties:
        affinityOrAntiaffinityGroupId:
          type: array
          items:
            type: string
        maxNumberOfInstances:
          type: integer
          format: int32
        minNumberOfInstances:
          type: integer
          format: int32
        nsDfId:
          type: string
        nsInstantiationLevelId:
          type: string
        nsProfileId:
          type: string
        nsVirtualLinkConnectivity:
          type: array
          items:
            $ref: '#/components/schemas/NsVirtualLinkConnectivity'
        nsdId:
          type: string
    NsSapInfo:
      title: NsSapInfo
      type: object
      properties:
        address:
          type: string
        description:
          type: string
        networkSliceInstance:
          $ref: '#/components/schemas/NetworkSliceInstance'
        sapName:
          type: string
        sapdId:
          type: string
    NsScaleInfo:
      title: NsScaleInfo
      type: object
      properties:
        nsScaleLevelId:
          type: string
        nsScalingAspectId:
          type: string
    NsScalingAspect:
      title: NsScalingAspect
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        nsScaleLevel:
          type: array
          items:
            $ref: '#/components/schemas/NsLevel'
        nsScalingAspectId:
          type: string
    NsToLevelMapping:
      title: NsToLevelMapping
      type: object
      properties:
        nsProfileId:
          type: string
        numberOfInstances:
          type: integer
          format: int32
    NsVirtualLinkConnectivity:
      title: NsVirtualLinkConnectivity
      type: object
      properties:
        cpdId:
          type: array
          items:
            type: string
        virtualLinkProfileId:
          type: string
    NsVirtualLinkDesc:
      title: NsVirtualLinkDesc
      type: object
      properties:
        connectivityType:
          $ref: '#/components/schemas/ConnectivityType'
        description:
          type: string
        security:
          $ref: '#/components/schemas/SecurityParameters'
        testAccess:
          type: array
          items:
            type: string
        virtuaLinkDescVersion:
          type: string
        virtualLinkDescId:
          type: string
        virtualLinkDescProvider:
          type: string
        virtualLinkDf:
          type: array
          items:
            $ref: '#/components/schemas/VirtualLinkDf'
    Nsd:
      title: Nsd
      type: object
      properties:
        autoScalingRule:
          type: array
          items:
            $ref: '#/components/schemas/NsAutoscalingRule'
        designer:
          type: string
        lifeCycleManagementScript:
          type: array
          items:
            $ref: '#/components/schemas/LifeCycleManagementScript'
        monitoredInfo:
          type: array
          items:
            $ref: '#/components/schemas/MonitoredData'
        nestedNsdId:
          type: array
          items:
            type: string
        nsDf:
          type: array
          items:
            $ref: '#/components/schemas/NsDf'
        nsdIdentifier:
          type: string
        nsdInvariantId:
          type: string
        nsdName:
          type: string
        pnfdId:
          type: array
          items:
            type: string
        sapd:
          type: array
          items:
            $ref: '#/components/schemas/Sapd'
        security:
          $ref: '#/components/schemas/SecurityParameters'
        version:
          type: string
        virtualLinkDesc:
          type: array
          items:
            $ref: '#/components/schemas/NsVirtualLinkDesc'
        vnfdId:
          type: array
          items:
            type: string
        vnffgd:
          type: array
          items:
            $ref: '#/components/schemas/Vnffgd'
    NsdInfo:
      title: NsdInfo
      type: object
      properties:
        deletionPending:
          type: boolean
        designer:
          type: string
        name:
          type: string
        nsd:
          $ref: '#/components/schemas/Nsd'
        nsdId:
          type: string
        nsdInfoId:
          type: string
        onboardedVnfPkgInfoId:
          type: array
          items:
            type: string
        operationalState:
          type: string
          enum:
          - ENABLED
          - DISABLED
        pnfdInfoId:
          type: array
          items:
            type: string
        previousNsdVersionId:
          type: string
        usageState:
          type: string
          enum:
          - IN_USE
          - NOT_IN_USE
        userDefinedData:
          type: object
          additionalProperties:
            type: string
        version:
          type: string
    NspDomainLayer:
      title: NspDomainLayer
      allOf:
      - $ref: '#/components/schemas/DomainLayer'
      - title: NspDomainLayer
        type: object
        properties:
          domainLayerId:
            type: string
          domainLayerType:
            type: string
            enum:
            - VERTICAL_SERVICE_PROVIDER
            - NETWORK_SLICE_PROVIDER
            - NETWORK_SERVICE_PROVIDER
          nspNbiType:
            type: string
            enum:
            - THREE_GPP
            - SONATA
            - NEUTRAL_HOSTING
            - SEBASTIAN
            - OSM
          ranEnabled:
            type: boolean
        discriminator:
          propertyName: type
    NstConfigurationRule:
      title: NstConfigurationRule
      type: object
      properties:
        day1:
          type: boolean
        name:
          type: string
        nsdId:
          type: string
        nstId:
          type: string
        params:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - REST
          - SSH
        vnfdId:
          type: string
    NstServiceProfile:
      title: NstServiceProfile
      type: object
      properties:
        availability:
          type: number
          format: float
        coverageAreaTAList:
          type: array
          items:
            type: string
        eMBBPerfReq:
          type: array
          items:
            $ref: '#/components/schemas/EMBBPerfReq'
        latency:
          type: integer
          format: int32
        maxNumberofUEs:
          type: integer
          format: int32
        pLMNIdList:
          type: array
          items:
            type: string
        resourceSharingLevel:
          type: boolean
        sST:
          type: string
          enum:
          - EMBB
          - URLLC
        serviceProfileId:
          type: string
        uEMobilityLevel:
          type: string
          enum:
          - STATIONARY
          - NOMADIC
          - RESTRICTED_MOBILITY
          - FULLY_MOBILITY
        uRLLCPerfReq:
          type: array
          items:
            $ref: '#/components/schemas/URLLCPerfReq'
    OnBoardNsTemplateRequest:
      title: OnBoardNsTemplateRequest
      type: object
      properties:
        configurationRules:
          type: array
          items:
            $ref: '#/components/schemas/NstConfigurationRule'
        nsds:
          type: array
          items:
            $ref: '#/components/schemas/Nsd'
        nst:
          $ref: '#/components/schemas/NST'
        pnfds:
          type: array
          items:
            $ref: '#/components/schemas/Pnfd'
        vnfPackages:
          type: array
          items:
            $ref: '#/components/schemas/OnBoardVnfPackageRequest'
    OnBoardTranslationRuleRequest:
      title: OnBoardTranslationRuleRequest
      type: object
      properties:
        vsdNsdTranslationRuleList:
          type: array
          items:
            $ref: '#/components/schemas/VsdNsdTranslationRule'
    OnBoardVnfPackageRequest:
      title: OnBoardVnfPackageRequest
      type: object
      properties:
        checksum:
          type: string
        name:
          type: string
        provider:
          type: string
        userDefinedData:
          type: object
          additionalProperties:
            type: string
        version:
          type: string
        vnfPackagePath:
          type: string
    OnBoardVsBlueprintRequest:
      title: OnBoardVsBlueprintRequest
      type: object
      properties:
        configurationRules:
          type: array
          items:
            $ref: '#/components/schemas/NstConfigurationRule'
        nsds:
          type: array
          items:
            $ref: '#/components/schemas/Nsd'
        nsts:
          type: array
          items:
            $ref: '#/components/schemas/NST'
        pnfds:
          type: array
          items:
            $ref: '#/components/schemas/Pnfd'
        translationRules:
          type: array
          items:
            $ref: '#/components/schemas/VsdNsdTranslationRule'
        vnfPackages:
          type: array
          items:
            $ref: '#/components/schemas/OnBoardVnfPackageRequest'
        vsBlueprint:
          $ref: '#/components/schemas/VsBlueprint'
    OnboardArbitratorPolicyRequest:
      title: OnboardArbitratorPolicyRequest
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/ArbitratorPolicy'
    OnboardVsDescriptorRequest:
      title: OnboardVsDescriptorRequest
      type: object
      properties:
        nestedVsd:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VsDescriptor'
        tenantId:
          type: string
        vsd:
          $ref: '#/components/schemas/VsDescriptor'
    OnboardedVnfPkgInfo:
      title: OnboardedVnfPkgInfo
      type: object
      properties:
        additionalArtifact:
          type: array
          items:
            $ref: '#/components/schemas/VnfPackageArtifactInformation'
        checksum:
          type: string
        deletionPending:
          type: boolean
        onboardedVnfPkgInfoId:
          type: string
        operationalState:
          type: string
          enum:
          - ENABLED
          - DISABLED
        softwareImage:
          type: array
          items:
            $ref: '#/components/schemas/VnfPackageSoftwareImageInformation'
        usageState:
          type: string
          enum:
          - IN_USE
          - NOT_IN_USE
        userDefinedData:
          type: object
          additionalProperties:
            type: string
        vnfProductName:
          type: string
        vnfProvider:
          type: string
        vnfSoftwareVersion:
          type: string
        vnfd:
          $ref: '#/components/schemas/Vnfd'
        vnfdId:
          type: string
        vnfdVersion:
          type: string
    PnfExtCpd:
      title: PnfExtCpd
      type: object
      properties:
        addressData:
          type: array
          items:
            $ref: '#/components/schemas/AddressData'
        cpRole:
          type: string
          enum:
          - ROOT
          - LEAF
        cpdId:
          type: string
        description:
          type: string
        layerProtocol:
          type: string
          enum:
          - ETHERNET
          - MPLS
          - ODU2
          - IPV4
          - IPV6
          - PSEUDO_WIRE
          - OTSIA
          - OCH
          - OTU
          - ODU
          - SDM
          - AROF
          - NOT_SPECIFIED
    PnfProfile:
      title: PnfProfile
      type: object
      properties:
        pnfProfileId:
          type: string
        pnfVirtualLinkConnectivity:
          type: array
          items:
            $ref: '#/components/schemas/NsVirtualLinkConnectivity'
        pnfdId:
          type: string
    Pnfd:
      title: Pnfd
      type: object
      properties:
        configurableProperty:
          type: array
          items:
            type: string
        pnfExtCp:
          type: array
          items:
            $ref: '#/components/schemas/PnfExtCpd'
        pnfdId:
          type: string
        provider:
          type: string
        security:
          $ref: '#/components/schemas/SecurityParameters'
        version:
          type: string
    Policy:
      title: Policy
      type: object
      properties:
        policyType:
          type: string
          enum:
          - SER
          - CST
          - A_COV
        policyValue:
          type: string
          enum:
          - HIGH
          - MEDIUM
          - LOW
    QoS:
      title: QoS
      type: object
      properties:
        latency:
          type: integer
          format: int32
        packetDelayVariation:
          type: integer
          format: int32
        packetLossRatio:
          type: integer
          format: int32
        priority:
          type: integer
          format: int32
    QueryNsdResponse:
      title: QueryNsdResponse
      type: object
      properties:
        queryResult:
          type: array
          items:
            $ref: '#/components/schemas/NsdInfo'
    QueryOnBoardedVnfPkgInfoResponse:
      title: QueryOnBoardedVnfPkgInfoResponse
      type: object
      properties:
        queryResult:
          type: array
          items:
            $ref: '#/components/schemas/OnboardedVnfPkgInfo'
    RemoteTenantInfo:
      title: RemoteTenantInfo
      type: object
      properties:
        host:
          type: string
        remoteTenantName:
          type: string
        remoteTenantPwd:
          type: string
    RequestedAdditionalCapabilityData:
      title: RequestedAdditionalCapabilityData
      type: object
      properties:
        minRequestedAdditionalCapabilityVersion:
          type: string
        preferredRequestedAdditionalCapabilityVersion:
          type: string
        requestedAdditionalCapabilityName:
          type: string
        supportMandatory:
          type: boolean
        targetPerformanceParameters:
          type: string
    ResponseEntity:
      title: ResponseEntity
      type: object
      properties:
        body:
          type: object
          properties: {}
        statusCode:
          type: string
          enum:
          - "100"
          - "101"
          - "102"
          - "103"
          - "200"
          - "201"
          - "202"
          - "203"
          - "204"
          - "205"
          - "206"
          - "207"
          - "208"
          - "226"
          - "300"
          - "301"
          - "302"
          - "303"
          - "304"
          - "305"
          - "307"
          - "308"
          - "400"
          - "401"
          - "402"
          - "403"
          - "404"
          - "405"
          - "406"
          - "407"
          - "408"
          - "409"
          - "410"
          - "411"
          - "412"
          - "413"
          - "414"
          - "415"
          - "416"
          - "417"
          - "418"
          - "419"
          - "420"
          - "421"
          - "422"
          - "423"
          - "424"
          - "426"
          - "428"
          - "429"
          - "431"
          - "451"
          - "500"
          - "501"
          - "502"
          - "503"
          - "504"
          - "505"
          - "506"
          - "507"
          - "508"
          - "509"
          - "510"
          - "511"
        statusCodeValue:
          type: integer
          format: int32
    RestNstConfigurationRule:
      title: RestNstConfigurationRule
      allOf:
      - $ref: '#/components/schemas/NstConfigurationRule'
      - title: RestNstConfigurationRule
        type: object
        properties:
          config:
            type: string
          day1:
            type: boolean
          expectedStatusCode:
            type: string
            enum:
            - "100"
            - "101"
            - "102"
            - "103"
            - "200"
            - "201"
            - "202"
            - "203"
            - "204"
            - "205"
            - "206"
            - "207"
            - "208"
            - "226"
            - "300"
            - "301"
            - "302"
            - "303"
            - "304"
            - "305"
            - "307"
            - "308"
            - "400"
            - "401"
            - "402"
            - "403"
            - "404"
            - "405"
            - "406"
            - "407"
            - "408"
            - "409"
            - "410"
            - "411"
            - "412"
            - "413"
            - "414"
            - "415"
            - "416"
            - "417"
            - "418"
            - "419"
            - "420"
            - "421"
            - "422"
            - "423"
            - "424"
            - "426"
            - "428"
            - "429"
            - "431"
            - "451"
            - "500"
            - "501"
            - "502"
            - "503"
            - "504"
            - "505"
            - "506"
            - "507"
            - "508"
            - "509"
            - "510"
            - "511"
          headers:
            type: object
            additionalProperties:
              type: string
          httpMethod:
            type: string
            enum:
            - GET
            - HEAD
            - POST
            - PUT
            - PATCH
            - DELETE
            - OPTIONS
            - TRACE
          name:
            type: string
          nsdId:
            type: string
          nstId:
            type: string
          params:
            type: array
            items:
              type: string
          type:
            type: string
            enum:
            - REST
            - SSH
          url:
            type: string
          vnfdId:
            type: string
    Rule:
      title: Rule
      type: object
    Sapd:
      title: Sapd
      type: object
      properties:
        addressData:
          type: array
          items:
            $ref: '#/components/schemas/AddressData'
        associatedCpdId:
          type: string
        cpRole:
          type: string
          enum:
          - ROOT
          - LEAF
        cpdId:
          type: string
        description:
          type: string
        layerProtocol:
          type: string
          enum:
          - ETHERNET
          - MPLS
          - ODU2
          - IPV4
          - IPV6
          - PSEUDO_WIRE
          - OTSIA
          - OCH
          - OTU
          - ODU
          - SDM
          - AROF
          - NOT_SPECIFIED
        nsVirtualLinkDescId:
          type: string
        sapAddressAssignment:
          type: boolean
    ScaleInfo:
      title: ScaleInfo
      type: object
      properties:
        aspectId:
          type: string
        scaleLevel:
          type: integer
          format: int32
    ScaleNsToLevelData:
      title: ScaleNsToLevelData
      type: object
      properties:
        nsInstantiationLevel:
          type: string
        nsScaleInfo:
          type: array
          items:
            $ref: '#/components/schemas/NsScaleInfo'
    ScaleVnfOpConfig:
      title: ScaleVnfOpConfig
      type: object
      properties:
        parameter:
          type: array
          items:
            type: string
        scalingByMoreThanOneStepSupported:
          type: boolean
    ScaleVnfToLevelOpConfig:
      title: ScaleVnfToLevelOpConfig
      type: object
      properties:
        arbitraryTargetLevelsSupported:
          type: boolean
        parameter:
          type: array
          items:
            type: string
    ScalingAspect:
      title: ScalingAspect
      type: object
      properties:
        associatedGroup:
          type: string
        description:
          type: string
        id:
          type: string
        maxScaleLevel:
          type: integer
          format: int32
        name:
          type: string
    SecurityParameters:
      title: SecurityParameters
      type: object
      properties:
        algorithm:
          type: string
        certificate:
          type: string
        signature:
          type: string
    ServiceConstraints:
      title: ServiceConstraints
      type: object
      properties:
        atomicComponentId:
          type: string
        canIncludeSharedElements:
          type: boolean
        nonPreferredProviders:
          type: array
          items:
            type: string
        preferredProviders:
          type: array
          items:
            type: string
        priority:
          type: string
          enum:
          - LOW
          - MEDIUM
          - HIGH
        prohibitedProviders:
          type: array
          items:
            type: string
        sharable:
          type: boolean
    Sla:
      title: Sla
      type: object
      properties:
        id:
          type: integer
          format: int64
        slaConstraints:
          type: array
          items:
            $ref: '#/components/schemas/SlaVirtualResourceConstraint'
        slaStatus:
          type: string
          enum:
          - ENABLED
          - DISABLED
    SlaVirtualResourceConstraint:
      title: SlaVirtualResourceConstraint
      type: object
      properties:
        location:
          type: string
        maxResourceLimit:
          $ref: '#/components/schemas/VirtualResourceUsage'
        scope:
          type: string
          enum:
          - CLOUD_RESOURCE
          - MEC_RESOURCE
          - GLOBAL_VIRTUAL_RESOURCE
    SliceServiceParameters:
      title: SliceServiceParameters
      type: object
      discriminator:
        propertyName: type
    SoftwareImageInformation:
      title: SoftwareImageInformation
      type: object
      properties:
        checksum:
          type: string
        containerFormat:
          type: string
        createdAt:
          type: string
          format: date
        diskFormat:
          type: string
        id:
          type: string
        minDisk:
          type: integer
          format: int32
        minRam:
          type: integer
          format: int32
        name:
          type: string
        provider:
          type: string
        size:
          type: integer
          format: int32
        userMetadata:
          type: object
          additionalProperties:
            type: string
        version:
          type: string
    SshNstConfigurationRule:
      title: SshNstConfigurationRule
      allOf:
      - $ref: '#/components/schemas/NstConfigurationRule'
      - title: SshNstConfigurationRule
        type: object
        properties:
          command:
            type: string
          day1:
            type: boolean
          ipAddress:
            type: string
          name:
            type: string
          nsdId:
            type: string
          nstId:
            type: string
          params:
            type: array
            items:
              type: string
          password:
            type: string
          port:
            type: integer
            format: int32
          type:
            type: string
            enum:
            - REST
            - SSH
          username:
            type: string
          vnfdId:
            type: string
    StackTraceElement:
      title: StackTraceElement
      type: object
      properties:
        className:
          type: string
        fileName:
          type: string
        lineNumber:
          type: integer
          format: int32
        methodName:
          type: string
        nativeMethod:
          type: boolean
    SwImageDesc:
      title: SwImageDesc
      type: object
      properties:
        checksum:
          type: string
        containerFormat:
          type: string
        diskFormat:
          type: string
        id:
          type: string
        minDisk:
          type: integer
          format: int32
        minRam:
          type: integer
          format: int32
        name:
          type: string
        operatingSystem:
          type: string
        size:
          type: integer
          format: int32
        supportedVirtualisationEnvironment:
          type: string
        swImage:
          type: string
        version:
          type: string
    Tenant:
      title: Tenant
      type: object
      properties:
        allocatedResources:
          $ref: '#/components/schemas/VirtualResourceUsage'
        password:
          type: string
        remoteTenantInfos:
          type: array
          items:
            $ref: '#/components/schemas/RemoteTenantInfo'
        sla:
          type: array
          items:
            $ref: '#/components/schemas/Sla'
        username:
          type: string
        vsdId:
          type: array
          items:
            type: string
        vsiId:
          type: array
          items:
            type: string
    TerminateNsiRequest:
      title: TerminateNsiRequest
      type: object
      properties:
        nsiId:
          type: string
    TerminateVnfOpConfig:
      title: TerminateVnfOpConfig
      type: object
      properties:
        maxRecommendedGracefulStopTimeout:
          type: string
        minGracefulStopTimeout:
          type: string
    Throwable:
      title: Throwable
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
        message:
          type: string
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
    TransferPolicyRequest:
      title: TransferPolicyRequest
      type: object
      properties:
        designer:
          type: string
        name:
          type: string
        pfId:
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
        version:
          type: string
    URLLCPerfReq:
      title: URLLCPerfReq
      type: object
      properties:
        cSAvailability:
          type: number
          format: float
        connDensity:
          type: integer
          format: int32
        e2eLatency:
          type: integer
          format: int32
        expDataRate:
          type: integer
          format: int32
        jitter:
          type: integer
          format: int32
        payloadSize:
          type: string
        reliability:
          type: number
          format: float
        serviceAreaDimension:
          type: string
        survivalTime:
          type: integer
          format: int32
        trafficDensity:
          type: integer
          format: int32
    URLLCServiceParameters:
      title: URLLCServiceParameters
      allOf:
      - $ref: '#/components/schemas/SliceServiceParameters'
      - title: URLLCServiceParameters
        type: object
        properties:
          cSAvailability:
            type: number
            format: float
          connDensity:
            type: number
            format: float
          e2eKatency:
            type: integer
            format: int32
          expDataRate:
            type: integer
            format: int32
          jitter:
            type: integer
            format: int32
          payloadSize:
            type: integer
            format: int32
          reliability:
            type: number
            format: float
          serviceDimension:
            type: string
          survivalTime:
            type: integer
            format: int32
          trafficDensity:
            type: string
    Vdu:
      title: Vdu
      type: object
      properties:
        bootOrder:
          type: object
          additionalProperties:
            type: string
        configurableProperties:
          $ref: '#/components/schemas/VnfcConfigurableProperties'
        description:
          type: string
        intCpd:
          type: array
          items:
            $ref: '#/components/schemas/VduCpd'
        monitoringParameter:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringParameter'
        name:
          type: string
        nfviConstraint:
          type: array
          items:
            type: string
        swImageDesc:
          $ref: '#/components/schemas/SwImageDesc'
        vduId:
          type: string
        virtualComputeDesc:
          type: string
        virtualStorageDesc:
          type: array
          items:
            type: string
    VduCpd:
      title: VduCpd
      type: object
      properties:
        addressData:
          type: array
          items:
            $ref: '#/components/schemas/AddressData'
        bitrateRequirement:
          type: integer
          format: int32
        cpRole:
          type: string
          enum:
          - ROOT
          - LEAF
        cpdId:
          type: string
        description:
          type: string
        intVirtualLinkDesc:
          type: string
        layerProtocol:
          type: string
          enum:
          - ETHERNET
          - MPLS
          - ODU2
          - IPV4
          - IPV6
          - PSEUDO_WIRE
          - OTSIA
          - OCH
          - OTU
          - ODU
          - SDM
          - AROF
          - NOT_SPECIFIED
        virtualNetworkInterfaceRequirements:
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkInterfaceRequirements'
    VduLevel:
      title: VduLevel
      type: object
      properties:
        numberOfInstances:
          type: integer
          format: int32
        vduId:
          type: string
    VduProfile:
      title: VduProfile
      type: object
      properties:
        affinityOrAntiAffinityGroupId:
          type: array
          items:
            type: string
        localAffinityOrAntiAffinityRule:
          type: array
          items:
            $ref: '#/components/schemas/AffinityRule'
        maxNumberOfInstances:
          type: integer
          format: int32
        minNumberOfInstances:
          type: integer
          format: int32
        vduId:
          type: string
    VerticalDomainLayer:
      title: VerticalDomainLayer
      allOf:
      - $ref: '#/components/schemas/DomainLayer'
      - title: VerticalDomainLayer
        type: object
        properties:
          domainLayerId:
            type: string
          domainLayerType:
            type: string
            enum:
            - VERTICAL_SERVICE_PROVIDER
            - NETWORK_SLICE_PROVIDER
            - NETWORK_SERVICE_PROVIDER
          dspType:
            type: string
            enum:
            - VERTICAL_SERVICE
            - EVE_PORTAL
        discriminator:
          propertyName: type
    VerticalServiceInstance:
      title: VerticalServiceInstance
      type: object
      properties:
        description:
          type: string
        domainId:
          type: string
        errorMessage:
          type: string
        locationConstraints:
          $ref: '#/components/schemas/LocationInfo'
        mappedInstanceId:
          type: string
        name:
          type: string
        nestedVsi:
          type: array
          items:
            $ref: '#/components/schemas/VerticalServiceInstance'
        networkSliceId:
          type: string
        nssis:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NetworkSliceSubnetInstance'
        status:
          type: string
          enum:
          - INSTANTIATING
          - INSTANTIATED
          - UNDER_MODIFICATION
          - WAITING_FOR_RESOURCES
          - INSTANTIATING_REMOTE_VSS
          - INSTANTIATING_LOCAL_VSS
          - MODIFIED
          - TERMINATING
          - TERMINATED
          - FAILED
        tenantId:
          type: string
        userData:
          type: object
          additionalProperties:
            type: string
        vsdId:
          type: string
        vsiId:
          type: string
        vssis:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VerticalSubserviceInstance'
    VerticalSubserviceInstance:
      title: VerticalSubserviceInstance
      type: object
      properties:
        blueprintId:
          type: string
        descriptorId:
          type: string
        domainId:
          type: string
        instanceId:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        verticalServiceStatus:
          type: string
          enum:
          - INSTANTIATING
          - INSTANTIATED
          - UNDER_MODIFICATION
          - WAITING_FOR_RESOURCES
          - INSTANTIATING_REMOTE_VSS
          - INSTANTIATING_LOCAL_VSS
          - MODIFIED
          - TERMINATING
          - TERMINATED
          - FAILED
    VirtualComputeDesc:
      title: VirtualComputeDesc
      type: object
      properties:
        complexityFactor:
          type: string
        logicalNode:
          type: object
          additionalProperties:
            type: string
        requestAdditionalCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/RequestedAdditionalCapabilityData'
        virtualComputeDescId:
          type: string
        virtualCpu:
          $ref: '#/components/schemas/VirtualCpuData'
        virtualMemory:
          $ref: '#/components/schemas/VirtualMemoryData'
    VirtualCpuData:
      title: VirtualCpuData
      type: object
      properties:
        cpuArchitecture:
          type: string
        numVirtualCpu:
          type: integer
          format: int32
        virtualCpuClock:
          type: integer
          format: int32
        virtualCpuOversubscriptionPolicy:
          type: string
    VirtualLinkDf:
      title: VirtualLinkDf
      type: object
      properties:
        bitrateRequirements:
          $ref: '#/components/schemas/LinkBitrateRequirements'
        flavourId:
          type: string
        qos:
          $ref: '#/components/schemas/QoS'
        serviceAvaibilityLevel:
          type: string
          enum:
          - LEVEL_1
          - LEVEL_2
          - LEVEL_3
    VirtualLinkProfile:
      title: VirtualLinkProfile
      type: object
      properties:
        affinityOrAntiAffinityGroupId:
          type: array
          items:
            type: string
        flavourId:
          type: string
        localAffinityOrAntiAffinityRule:
          type: array
          items:
            $ref: '#/components/schemas/AffinityRule'
        maxBitrateRequirements:
          $ref: '#/components/schemas/LinkBitrateRequirements'
        minBitrateRequirements:
          $ref: '#/components/schemas/LinkBitrateRequirements'
        virtualLinkDescId:
          type: string
        virtualLinkProfileId:
          type: string
    VirtualLinkToLevelMapping:
      title: VirtualLinkToLevelMapping
      type: object
      properties:
        bitRateRequirements:
          $ref: '#/components/schemas/LinkBitrateRequirements'
        virtualLinkProfileId:
          type: string
    VirtualMemoryData:
      title: VirtualMemoryData
      type: object
      properties:
        numaEnabled:
          type: boolean
        virtualMemOversubscriptionPolicy:
          type: string
        virtualMemSize:
          type: integer
          format: int32
    VirtualNetworkInterfaceRequirements:
      title: VirtualNetworkInterfaceRequirements
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        networkInterfaceRequirements:
          type: string
        nicIoRequirements:
          type: string
        supportMandatory:
          type: boolean
    VirtualResourceUsage:
      title: VirtualResourceUsage
      type: object
      properties:
        diskStorage:
          type: integer
          format: int32
        memoryRAM:
          type: integer
          format: int32
        vCPU:
          type: integer
          format: int32
    VirtualStorageDesc:
      title: VirtualStorageDesc
      type: object
      properties:
        id:
          type: string
        rdmaEnabled:
          type: boolean
        sizeOfStorage:
          type: integer
          format: int32
        swImageDesc:
          type: string
        typeOfStorage:
          type: string
    VnfConfigurableProperties:
      title: VnfConfigurableProperties
      type: object
      properties:
        additionalConfigurableProperty:
          type: array
          items:
            type: string
        autoHealable:
          type: boolean
        autoScalable:
          type: boolean
    VnfDf:
      title: VnfDf
      type: object
      properties:
        affinityOrAntiAffinityGroup:
          type: array
          items:
            $ref: '#/components/schemas/AffinityOrAntiAffinityGroup'
        defaultInstantiationLevelId:
          type: string
        description:
          type: string
        flavourId:
          type: string
        instantiationLevel:
          type: array
          items:
            $ref: '#/components/schemas/InstantiationLevel'
        monitoringParameter:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringParameter'
        scalingAspect:
          type: array
          items:
            $ref: '#/components/schemas/ScalingAspect'
        supportedOperation:
          type: array
          items:
            type: string
            enum:
            - INSTATIATE_VNF
            - QUERY_VNF
            - TERMINATE_VNF
            - SCALE_IN_VNF
            - SCALE_OUT_VNF
            - SCALE_UP_VNF
            - SCALE_DOWN_VNF
            - SCALE_VNF_TO_LEVEL
            - CHANGE_VNF_FLAVOUR
            - OPERATE_VNF
            - UPDATE_VNF
            - MODIFY_VNF
            - HEAL_VNF
            - CHANGE_EXT_VNF_CONNECTIVITY
        vduProfile:
          type: array
          items:
            $ref: '#/components/schemas/VduProfile'
        virtualLinkProfile:
          type: array
          items:
            $ref: '#/components/schemas/VirtualLinkProfile'
        vnfLcmOperationsConfiguration:
          $ref: '#/components/schemas/VnfLcmOperationsConfiguration'
    VnfExtCpd:
      title: VnfExtCpd
      type: object
      properties:
        addressData:
          type: array
          items:
            $ref: '#/components/schemas/AddressData'
        cpRole:
          type: string
          enum:
          - ROOT
          - LEAF
        cpdId:
          type: string
        description:
          type: string
        intCpd:
          type: string
        intVirtualLinkDesc:
          type: string
        layerProtocol:
          type: string
          enum:
          - ETHERNET
          - MPLS
          - ODU2
          - IPV4
          - IPV6
          - PSEUDO_WIRE
          - OTSIA
          - OCH
          - OTU
          - ODU
          - SDM
          - AROF
          - NOT_SPECIFIED
        virtualNetworkInterfaceRequirements:
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkInterfaceRequirements'
    VnfIndicator:
      title: VnfIndicator
      type: object
      properties:
        id:
          type: string
        indicatorValue:
          type: string
        name:
          type: string
        source:
          type: string
          enum:
          - VNF
          - EM
          - BOTH_VNF_EM
    VnfIndicatorData:
      title: VnfIndicatorData
      type: object
      properties:
        vnfIndicator:
          type: string
        vnfdId:
          type: string
    VnfInfoModifiableAttributes:
      title: VnfInfoModifiableAttributes
      type: object
      properties:
        extension:
          type: object
          additionalProperties:
            type: string
        metadata:
          type: object
          additionalProperties:
            type: string
    VnfLCMScripts:
      title: VnfLCMScripts
      type: object
      properties:
        target:
          type: string
    VnfLcmOperationsConfiguration:
      title: VnfLcmOperationsConfiguration
      type: object
      properties:
        changeExtVnfConnectivityOpConfig:
          $ref: '#/components/schemas/ChangeExtVnfConnectivityOpConfig'
        changeVnfFlavourOpConfig:
          $ref: '#/components/schemas/ChangeVnfFlavourOpConfig'
        healVnfOpConfig:
          $ref: '#/components/schemas/HealVnfOpConfig'
        instantiateVnfOpConfig:
          $ref: '#/components/schemas/InstantiateVnfOpConfig'
        operateVnfOpConfig:
          $ref: '#/components/schemas/TerminateVnfOpConfig'
        scaleVnfOpConfig:
          $ref: '#/components/schemas/ScaleVnfOpConfig'
        scaleVnfToLevelOpConfig:
          $ref: '#/components/schemas/ScaleVnfToLevelOpConfig'
        terminateVnfOpConfig:
          $ref: '#/components/schemas/TerminateVnfOpConfig'
    VnfPackageArtifactInformation:
      title: VnfPackageArtifactInformation
      type: object
      properties:
        metadata:
          type: string
        selector:
          type: string
    VnfPackageSoftwareImageInformation:
      title: VnfPackageSoftwareImageInformation
      type: object
      properties:
        accessInformation:
          type: string
        softwareImageInformation:
          $ref: '#/components/schemas/SoftwareImageInformation'
    VnfProfile:
      title: VnfProfile
      type: object
      properties:
        affinityOrAntiAffinityGroupId:
          type: array
          items:
            type: string
        flavourId:
          type: string
        instantiationLevel:
          type: string
        localAffinityOrAntiAffinityRule:
          type: array
          items:
            $ref: '#/components/schemas/AffinityRule'
        maxNumberOfInstances:
          type: integer
          format: int32
        minNumberOfInstances:
          type: integer
          format: int32
        nsVirtualLinkConnectivity:
          type: array
          items:
            $ref: '#/components/schemas/NsVirtualLinkConnectivity'
        script:
          type: array
          items:
            $ref: '#/components/schemas/VnfLCMScripts'
        vnfProfileId:
          type: string
        vnfdId:
          type: string
    VnfToLevelMapping:
      title: VnfToLevelMapping
      type: object
      properties:
        numberOfInstances:
          type: integer
          format: int32
        vnfProfileId:
          type: string
    VnfVirtualLinkDesc:
      title: VnfVirtualLinkDesc
      type: object
      properties:
        connectivityType:
          $ref: '#/components/schemas/ConnectivityType'
        description:
          type: string
        monitoringParameter:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringParameter'
        testAccess:
          type: array
          items:
            type: string
        virtualLinkDescFlavour:
          type: array
          items:
            $ref: '#/components/schemas/VirtualLinkDf'
        virtualLinkDescId:
          type: string
    VnfcConfigurableProperties:
      title: VnfcConfigurableProperties
      type: object
    Vnfd:
      title: Vnfd
      type: object
      properties:
        autoscale:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        configurableProperties:
          $ref: '#/components/schemas/VnfConfigurableProperties'
        defaultLocalizationLanguage:
          type: string
        deploymentFlavour:
          type: array
          items:
            $ref: '#/components/schemas/VnfDf'
        elementGroup:
          type: array
          items:
            $ref: '#/components/schemas/VnfdElementGroup'
        intVirtualLinkDesc:
          type: array
          items:
            $ref: '#/components/schemas/VnfVirtualLinkDesc'
        lifeCycleManagementScript:
          type: array
          items:
            $ref: '#/components/schemas/LifeCycleManagementScript'
        localizationLanguage:
          type: array
          items:
            type: string
        modifiableAttributes:
          $ref: '#/components/schemas/VnfInfoModifiableAttributes'
        vdu:
          type: array
          items:
            $ref: '#/components/schemas/Vdu'
        virtualComputeDesc:
          type: array
          items:
            $ref: '#/components/schemas/VirtualComputeDesc'
        virtualStorageDesc:
          type: array
          items:
            $ref: '#/components/schemas/VirtualStorageDesc'
        vnfExtCpd:
          type: array
          items:
            $ref: '#/components/schemas/VnfExtCpd'
        vnfIndicator:
          type: array
          items:
            $ref: '#/components/schemas/VnfIndicator'
        vnfProductInfoDescription:
          type: string
        vnfProductInfoName:
          type: string
        vnfProductName:
          type: string
        vnfProvider:
          type: string
        vnfSoftwareVersion:
          type: string
        vnfdId:
          type: string
        vnfdVersion:
          type: string
        vnfmInfo:
          type: array
          items:
            type: string
    VnfdElementGroup:
      title: VnfdElementGroup
      type: object
      properties:
        description:
          type: string
        vdu:
          type: array
          items:
            type: string
        virtualLinkDesc:
          type: array
          items:
            type: string
        vnfdElementGroupId:
          type: string
    Vnffgd:
      title: Vnffgd
      type: object
      properties:
        cpdPoolId:
          type: array
          items:
            type: string
        nfpd:
          type: array
          items:
            $ref: '#/components/schemas/Nfpd'
        pnfdId:
          type: array
          items:
            type: string
        virtualLinkDescId:
          type: array
          items:
            type: string
        vnfdId:
          type: array
          items:
            type: string
        vnffgdId:
          type: string
    VsAction:
      title: VsAction
      type: object
      properties:
        actionType:
          type: string
          enum:
          - UPDATE
          - TERMINATE
        nsInstantiationInfo:
          $ref: '#/components/schemas/NfvNsInstantiationInfo'
        vsiId:
          type: string
    VsBlueprint:
      title: VsBlueprint
      type: object
      properties:
        applicationMetrics:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationMetric'
        atomicComponents:
          type: array
          items:
            $ref: '#/components/schemas/VsComponent'
        blueprintId:
          type: string
        configurableParameters:
          type: array
          items:
            type: string
        connectivityServices:
          type: array
          items:
            $ref: '#/components/schemas/VsbLink'
        description:
          type: string
        embbServiceCategory:
          type: string
          enum:
          - URBAN_MACRO
          - RURAL_MACRO
          - INDOOR_HOTSPOT
          - BROADBAND_ACCESS_IN_A_CROWD
          - DENSE_URBAN
          - BROADBAND_LIKE_SERVICES
          - HIGH_SPEED_TRAIN
          - HIGH_SPEED_VEHICLE
          - AIRPLANES_CONNECTIVITY
        endPoints:
          type: array
          items:
            $ref: '#/components/schemas/VsbEndpoint'
        interSite:
          type: boolean
        name:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/VsBlueprintParameter'
        serviceSequence:
          type: array
          items:
            $ref: '#/components/schemas/VsbForwardingPathHop'
        sliceServiceType:
          type: string
          enum:
          - NONE
          - EMBB
          - URLLC
          - M_IOT
          - ENTERPRISE
          - NFV_IAAS
        urllcServiceCategory:
          type: string
          enum:
          - DISCRETE_AUTOMATION
          - PROCESS_AUTOMATION_REMOTE_CONTROL
          - PROCESS_AUTOMATION_MONITORING
          - ELECTRICITY_DISTRIBUTION_HIGH_VOLTAGE
          - ELECTRICITY_DISTRIBUTION_MEDIUM_VOLTAGE
          - INTELLIGENT_TRANSPORT_SYSTEMS_INFRASTRUCTURE_BACKHAUL
        version:
          type: string
    VsBlueprintInfo:
      title: VsBlueprintInfo
      type: object
      properties:
        activeVsdId:
          type: array
          items:
            type: string
        name:
          type: string
        onBoardedMecAppPackageInfoId:
          type: array
          items:
            type: string
        onBoardedNsdInfoId:
          type: array
          items:
            type: string
        onBoardedVnfPackageInfoId:
          type: array
          items:
            type: string
        vsBlueprint:
          $ref: '#/components/schemas/VsBlueprint'
        vsBlueprintId:
          type: string
        vsBlueprintVersion:
          type: string
    VsBlueprintParameter:
      title: VsBlueprintParameter
      type: object
      properties:
        applicabilityField:
          type: string
        parameterDescription:
          type: string
        parameterId:
          type: string
        parameterName:
          type: string
        parameterType:
          type: string
    VsComponent:
      title: VsComponent
      type: object
      properties:
        associatedVsbId:
          type: string
        compatibleSite:
          type: string
        componentId:
          type: string
        endPointsIds:
          type: array
          items:
            type: string
        imagesUrls:
          type: array
          items:
            type: string
        lifecycleOperations:
          type: object
          additionalProperties:
            type: string
        placement:
          type: string
          enum:
          - EDGE
          - CLOUD
        serversNumber:
          type: integer
          format: int32
        type:
          type: string
          enum:
          - VNF
          - SERVICE
          - FUNCTION
          - OTHER
    VsDescriptor:
      title: VsDescriptor
      type: object
      properties:
        associatedVsdId:
          type: string
        domainId:
          type: string
        managementType:
          type: string
          enum:
          - PROVIDER_MANAGED
          - TENANT_MANAGED
        name:
          type: string
        nestedVsdIds:
          type: object
          additionalProperties:
            type: string
        qosParameters:
          type: object
          additionalProperties:
            type: string
        serviceConstraints:
          type: array
          items:
            $ref: '#/components/schemas/ServiceConstraints'
        sla:
          $ref: '#/components/schemas/VsdSla'
        sliceServiceParameters:
          $ref: '#/components/schemas/SliceServiceParameters'
        version:
          type: string
        vsBlueprintId:
          type: string
        vsDescriptorId:
          type: string
    VsbEndpoint:
      title: VsbEndpoint
      type: object
      properties:
        endPointId:
          type: string
        external:
          type: boolean
        management:
          type: boolean
        ranConnection:
          type: boolean
    VsbForwardingPathEndPoint:
      title: VsbForwardingPathEndPoint
      type: object
      properties:
        endPointId:
          type: string
        vsComponentId:
          type: string
    VsbForwardingPathHop:
      title: VsbForwardingPathHop
      type: object
      properties:
        hopEndPoints:
          type: array
          items:
            $ref: '#/components/schemas/VsbForwardingPathEndPoint'
    VsbLink:
      title: VsbLink
      type: object
      properties:
        connectivityProperties:
          type: array
          items:
            type: string
        endPointIds:
          type: array
          items:
            type: string
        external:
          type: boolean
        name:
          type: string
    VsdNsdTranslationRule:
      title: VsdNsdTranslationRule
      type: object
      properties:
        blueprintId:
          type: string
        id:
          type: integer
          format: int64
        input:
          type: array
          items:
            $ref: '#/components/schemas/VsdParameterValueRange'
        nsFlavourId:
          type: string
        nsInstantiationLevelId:
          type: string
        nsdId:
          type: string
        nsdVersion:
          type: string
        nsstDomain:
          type: object
          additionalProperties:
            type: string
        nstId:
          type: string
        parametersMapping:
          type: object
          additionalProperties:
            type: string
    VsdParameterValueRange:
      title: VsdParameterValueRange
      type: object
      properties:
        maxValue:
          type: integer
          format: int32
        minValue:
          type: integer
          format: int32
        parameterId:
          type: string
    VsdSla:
      title: VsdSla
      type: object
      properties:
        availabilityCoverage:
          type: string
          enum:
          - AVAILABILITY_COVERAGE_HIGH
          - AVAILABILITY_COVERAGE_MEDIUM
          - UNDEFINED
        lowCostRequired:
          type: boolean
        serviceCreationTime:
          type: string
          enum:
          - SERVICE_CREATION_TIME_LOW
          - SERVICE_CREATION_TIME_MEDIUM
          - UNDEFINED

